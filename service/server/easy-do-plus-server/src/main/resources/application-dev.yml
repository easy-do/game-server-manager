
server:
  port: 30002


management:
  server:
    port: 0
  metrics:
    tags:
      application: ${spring.application.name}

#MybatisPlus配置
mybatis-plus:
  mapper-locations: classpath*:mapper/**/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: plus.easydo.push.**.entity
  global-config:
    #数据库相关配置
    db-config:
      #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID", ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: AUTO
      logic-delete-field: delFlag
    #      logic-remove-value: 1 # 逻辑已删除值(默认为 1)
    #      logic-not-remove-value: 0 # 逻辑未删除值(默认为 0)
    banner: false
  #原生配置
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
    cache-enabled: true
    call-setters-on-nulls: true
    jdbc-type-for-null: 'null'
    default-statement-timeout: 50000

system:
  server-list:
    uc: http://127.0.0.1:30001
  #黑名单配置
  back-list:
    #拉黑持续时间
    back-time: 30
    #判断单个url请求频率的时间范围 单位毫秒
    max-req-time: 30000
    #指定时间范围内触发黑名单的最大请求次数
    max-req-count: 10
  #后端地址
  domain: ${BE_DOMAIN:https://manager.easydo.plus}
  redis:
    cache:
      # 缓存默认过期时间
      timout: 300
    fastJson:
      package:
        #序列化白名单，不填则不限制
        white:
    #redis订阅
    subscribe:
      enable: false
      taskNum: 5
      # map格式  key：订阅的主题  value：对应spring中的bean  需要继承AbstractMessageHandler
      topics:
        topic1: applicationDeploy
    # 开启redis stream队列  消费者需要加注解 @RedisStreamListener指定频道和分组 实现StreamListener类
    stream:
      enabled: false

# Sa-Token配置
sa-token:
  # jwt秘钥
  jwt-secret-key: ${JWT_SECRET_KEY:123}
  # token 名称 (同时也是cookie名称)
  token-name: token
  # token 有效期，单位s 默认30天, -1代表永不过期
  timeout: 3600
  # token 临时有效期 (指定时间内无操作就视为token过期) 单位: 秒
  activity-timeout: -1
  # 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)
  is-concurrent: false
  # 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)
  is-share: true
  # token风格
  token-style: uuid
  # 是否输出操作日志
  is-log: false
  alone-redis:
    # Redis数据库索引
    database: 1
    # Redis服务器地址
    host: ${REDIS_HOST:redis.server}
    # Redis服务器连接端口
    port: ${REDIS_PORT:6379}
    # Redis服务器连接密码（默认为空）
    password: ${REDIS_PASSWORD:n2H%yuXZFS}
    # 连接超时时间
    timeout: 10s

springdoc:
  swagger-ui:
    # 修改Swagger UI路径
    path: /swagger-ui.html
    # 开启Swagger UI界面
    enabled: true
  api-docs:
    # 修改api-docs路径
    path: /v2/api-docs
    # 开启api-docs
    enabled: true
  # 配置需要生成接口文档的扫描包
  packages-to-scan: plus.easydo.push.server.controller
  # 配置需要生成接口文档的接口路径
  #  paths-to-match: /brand/**,/admin/**
  customize:
    title: 主服务程序 API
    description: 主服务程序API接口
    version: 1.0.0
    license:
      name: 未设置
      url: https://push.easydo.plus
    externalDocs:
      description: 外部文档
      url: https://push.easydo.plus

jetcache:
  statIntervalMinutes: 15
  areaInCacheName: false
  local:
    default:
      type: linkedhashmap
      keyConvertor: fastjson2
  remote:
    default:
      type: redis.lettuce
      keyConvertor: fastjson2 #其他可选：fastjson/jackson
      broadcastChannel: ${spring.application.name}
      #redis://密码@ip:端口/redis库名?timeout=5s
      uri: redis://${REDIS_PASSWORD:n2H%yuXZFS}@${REDIS_HOST:redis.server}:${REDIS_PORT:6379}/


feign:
  hystrix:
    enabled: true
  client:
    config:
      default:
        loggerLevel: FULL
  okhttp:
    enabled: true
  httpclient:
    maxConnections: 1000
    connectionTimeout: 3000

oss:
  #minio文件存储
  minio:
    #是否开启 使用@EnableFileStoreServer注解时生效
    enable: true
    #minio地址
    server-address: ${MINIO_SERVER:https://minio.server:9000}
    #账号
    access-key: ${MINIO_ACCESS_KEY:minioadmin}
    #密码
    secret-key: ${MINIO_SECRET_KEY:minioadmin}
    #默认桶名称
    default-bucket: ${DEFAULT_BUCKET:file-store}
  #本地文件存储
  local:
    #是否开启 使用@EnableFileStoreServer注解时生效
    enable: false
    #默认分组名称
    default-group-name: defaultGroup
    #存储文件的系统绝对路径
    store-path: D:\defaultOss-path\
